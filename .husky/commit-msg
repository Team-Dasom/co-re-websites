#!/bin/sh
. "$(dirname "$0")/_/husky.sh"

# 커밋 컨벤션
# 0. 검사 예외 조건 (자동 생성, 최초 커밋)
# - Merge branch*, Merge pull request*, initial*
# 1. 접두사의 글자는 소문자
# 2. 맨 마지막 글자 '.' 마침표 금지
# 3. 커밋 접두사 (규칙: '접두사' + '콜론' + ' ')
# - ✨ [FEAT] 새로운 기능 구현
# - ✅ [MOD] 코드 수정 및 내부 파일 수정
# - ➕ [ADD] 부수적인 코드 추가 및 라이브러리 추가, 새로운 파일 생성
# - 🎀 [CHORE] 버전 코드 수정, 패키지 구조 변경, 타입 및 변수명 변경 등의 작은 작업
# - ⚰️ [DEL] 쓸모없는 코드나 파일 삭제
# - 💄 [UI] UI 작업
# - 🔨 [FIX] 버그 및 오류 해결
# - 🚑️ [HOTFIX] issue나 QA에서 문의된 급한 버그 및 오류 해결
# - 🔀 [MERGE] 다른 브랜치와의 MERGE
# - 🚚 [MOVE] 프로젝트 내 파일이나 코드의 이동
# - ⏪️ [RENAME] 파일 이름 변경
# - ♻️ [REFACTOR] 전면 수정
# - 📝 [DOCS] README나 WIKI 등의 문서 개정
# 5. '!': 급한 변경 사항인 경우에 추가 (접두사, () 뒤 / 콜론 이전)
# 6. (): 추가 요약 정보가 필요할 경우 (접두사 뒤 / !, 콜론 이전)

COMMIT_MSG_FILE=$1
FIRST_LINE=`head -n1 ${COMMIT_MSG_FILE}`
RES="needCheck" # needCheck, auto, initial, lintError*, clear

if [[ $FIRST_LINE =~ ^(Merge branch) ]] ||
   [[ $FIRST_LINE =~ ^(Merge pull request) ]]; then
  RES="auto"
fi

if [[ $FIRST_LINE =~ ^(initial) ]]; then
  RES="initial"
fi

if [ $RES == "needCheck" ]; then
  if [[ $FIRST_LINE =~ (\.)$ ]]; then
    RES="lintError1"
  fi

  if [[ ! $FIRST_LINE =~ ^(✨ \[FEAT\] ) ]] &&
      [[ ! $FIRST_LINE =~ ^(:sparkles: \[FEAT\] ) ]] &&
      [[ ! $FIRST_LINE =~ ^(✅ \[MOD\] ) ]] &&
      [[ ! $FIRST_LINE =~ ^(:white_check_mark: \[MOD\] ) ]] &&
      [[ ! $FIRST_LINE =~ ^(🚑️ \[HOTFIX\] ) ]] &&
      [[ ! $FIRST_LINE =~ ^(:ambulance: \[HOTFIX\] ) ]] &&
      [[ ! $FIRST_LINE =~ ^(➕ \[ADD\] ) ]] &&
      [[ ! $FIRST_LINE =~ ^(:heavy_plus_sign: \[ADD\] ) ]] &&
      [[ ! $FIRST_LINE =~ ^(🎀 \[CHORE\] ) ]] &&
      [[ ! $FIRST_LINE =~ ^(:ribbon: \[CHORE\] ) ]] &&
      [[ ! $FIRST_LINE =~ ^(⚰️ \[DEL\] ) ]] &&
      [[ ! $FIRST_LINE =~ ^(:coffin: \[DEL\] ) ]] &&
      [[ ! $FIRST_LINE =~ ^(💄 \[UI\] ) ]] &&
      [[ ! $FIRST_LINE =~ ^(:lipstick: \[UI\] ) ]] &&
      [[ ! $FIRST_LINE =~ ^(🔨 \[FIX\] ) ]] &&
      [[ ! $FIRST_LINE =~ ^(:hammer: \[FIX\] ) ]] &&
      [[ ! $FIRST_LINE =~ ^(🔀 \[MERGE\] ) ]] &&
      [[ ! $FIRST_LINE =~ ^(:twisted_rightwards_arrows: \[MERGE\] ) ]] &&
      [[ ! $FIRST_LINE =~ ^(🚚 \[MOVE\] ) ]] &&
      [[ ! $FIRST_LINE =~ ^(:truck: \[MOVE\] ) ]] &&
      [[ ! $FIRST_LINE =~ ^(⏪️ \[RENAME\] ) ]] &&
      [[ ! $FIRST_LINE =~ ^(:rewind: \[RENAME\] ) ]] &&
      [[ ! $FIRST_LINE =~ ^(♻️ \[REFACTOR\] ) ]] &&
      [[ ! $FIRST_LINE =~ ^(:recycle: \[REFACTOR\] ) ]] &&
      [[ ! $FIRST_LINE =~ ^(📝 \[DOCS\] ) ]] &&
      [[ ! $FIRST_LINE =~ ^(:memo: \[DOCS\] ) ]]; then
    RES="lintError2"
  fi

  if [[ ! $RES =~ ^(lintError) ]]; then
    RES="clear"
  fi
fi

if [[ $RES =~ ^(lintError) ]]; then
  if [[ $RES == "lintError1" ]]; then
    echo "CommitLint#1: 문장 마지막의 ('.') 마침표를 제거해주세요."
  fi
  if [[ $RES == "lintError2" ]]; then
    echo "CommitLint#2: 접두사, 콜론, 띄어쓰기 형태를 확인하세요. \n(✨ [FEAT] ,✅ [MOD] ,➕ [ADD] ,🎀 [CHORE] ,⚰️ [DEL] ,💄 [UI],\n🔨 [FIX],🚑️ [HOTFIX],🔀 [MERGE],🚚 [MOVE],⏪️ [RENAME],♻️ [REFACTOR],📝 [DOCS])"
  fi
  exit 1
elif [[ $RES == "auto" ]]; then
  echo "Automatically generated commit message from git"
elif [[ $RES == "initial" ]]; then
  echo "Initial commit"
elif [[ $RES == "clear" ]]; then
  echo "Pass commit lint!"
fi

exit 0